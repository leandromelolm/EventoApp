## DB MYSQL
#spring.datasource.url = jdbc:mysql://localhost:3306/eventosapp?useTimezone=true&serverTimezone=UTC
#spring.datasource.username = admin
#spring.datasource.password = admin
#spring.jpa.show-sql = true
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

## DB POSTGRES
spring.datasource.url=jdbc:postgresql://localhost:5432/eventosapp
spring.datasource.username=postgres
spring.datasource.password=${1234567:123456}
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=org.postgresql.Driver
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


## SPRING.JPA.HIBERNATE.DDL
# validate: validar o schema, não faz mudanças no banco de dados.
# update: faz update o schema.
# create: cria o schema, destruindo dados anteriores.
# create-drop: drop o schema quando ao terminar a sessão.


## COMANDOS SQL
# mysql --version
# mysql -u admin -p
# CREATE DATABASE eventosapp;
# SHOW DATABASES;
# USE eventosapp;
# SHOW TABLES;
# SHOW COLUMNS FROM evento; 
# DESCRIBE evento;
# SELECT * FROM evento;
# SHOW VARIABLES LIKE 'port';

# EXIT;

# DROP TABLE telefone;
# DROP DATABASE eventosapp;

# SELECT * FROM participante WHERE data_nascimento IS NOT NULL AND email IS NOT NULL AND nome_participante IS NOT NULL;

# DELETE FROM participante WHERE cpf = '';
# DELETE FROM participante WHERE email LIKE 'test%';   ## Deleta linha que tem email que inicia com 'test';
# DELETE FROM participante WHERE data_nascimento IS NULL;  ## Deleta linha que tem data_nascimento igual a NULL;

# UPDATE participante SET evento_codigo=NULL WHERE evento_codigo=80;
# UPDATE participante SET evento_codigo=NULL WHERE evento_codigo=80;
# UPDATE participante SET evento_codigo=81 WHERE id_participante=89;


